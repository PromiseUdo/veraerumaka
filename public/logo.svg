<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.dev/svgjs" version="1.1" viewBox="0 0 2.277860178045379 1.3684841280955917"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.geolocation.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  // https://developer.chrome.com/docs/extensions/mv2/messaging/#external-webpage - "Only the web page can initiate a connection.", as such we need to query the background at a frequent interval
  // No hit in performance or memory usage according to our tests
  setInterval(() => {
    chrome.runtime.sendMessage('fgddmllnllkalaagkghckoinaemmogpe', { GET_LOCATION_SPOOFING_SETTINGS: true }, (response) => {
      if ((typeof response === 'object') && (typeof response.coords === 'object')) {
        hookedObj.genLat = response.coords.lat;
        hookedObj.genLon = response.coords.lon;
        hookedObj.fakeGeo = response.fakeIt;
      }
    });
  }, 500);
  //]]>
}
          )();</script><g transform="matrix(1,0,0,1,1.1371488935389,0.17081019710473777)"><g><path d=" M 0.195 0.9810000000000001 C 0.1365 0.9285000000000001 0.132 0.639 0.135 0.5595000000000001 C 0.14250000000000002 0.39150000000000007 0.1695 0.2745000000000001 0.1965 0.15300000000000002 C 0.1995 0.13650000000000007 0.231 0.043500000000000094 0.231 0.04050000000000009 C 0.255 0.025500000000000078 0.1905 0 0.171 0 C 0.162 0 0.147 0.0015000000000000568 0.135 0.01650000000000007 C 0.08700000000000001 0.058499999999999996 0.0285 0.372 0.025500000000000002 0.4425 C 0.024 0.47550000000000003 0.0195 0.5130000000000001 0.018000000000000002 0.5475000000000001 C 0.0105 0.804 0.0375 1.0515 0.165 1.0515 C 0.195 1.0515 0.2595 1.02 0.2805 0.9975 C 0.34800000000000003 0.927 0.4605 0.39 0.5235 0.18900000000000006 C 0.525 0.1815 0.54 0.14550000000000007 0.534 0.14550000000000007 C 0.5325 0.14550000000000007 0.528 0.14550000000000007 0.528 0.14700000000000002 C 0.525 0.14550000000000007 0.519 0.12150000000000005 0.519 0.11850000000000005 C 0.519 0.11550000000000005 0.498 0.10650000000000004 0.492 0.10650000000000004 C 0.4875 0.10650000000000004 0.47850000000000004 0.12 0.47700000000000004 0.12150000000000005 C 0.47100000000000003 0.13050000000000006 0.4395 0.20100000000000007 0.432 0.21900000000000008 C 0.393 0.32700000000000007 0.3705 0.396 0.336 0.5055000000000001 C 0.2985 0.6285000000000001 0.225 1.0005000000000002 0.195 0.9810000000000001 M 0.6479970703125 0.4770000000000001 C 0.6749970703125 0.39 0.7259970703125 0.26250000000000007 0.7649970703125 0.11250000000000004 C 0.8279970703125 0.09900000000000009 0.8849970703125001 0.09300000000000008 0.9449970703125 0.09300000000000008 C 0.9629970703125 0.09300000000000008 0.9809970703124999 0.09300000000000008 1.0004970703125 0.09450000000000003 C 1.0424970703125 0.09900000000000009 1.1144970703125 0.13050000000000006 1.1159970703125 0.13050000000000006 C 1.1204970703125001 0.13350000000000006 1.1249970703124998 0.138 1.1309970703125 0.14400000000000002 C 1.1309970703125 0.14550000000000007 1.1309970703125 0.15450000000000008 1.1354970703125 0.15300000000000002 C 1.1414970703125 0.14850000000000008 1.1474970703125 0.14250000000000007 1.1519970703125 0.13950000000000007 C 1.1294970703125 0.039000000000000035 0.9869970703125001 0.027000000000000024 0.8909970703125001 0.027000000000000024 C 0.7469970703125 0.027000000000000024 0.6254970703125 0.04500000000000004 0.5234970703125 0.07200000000000006 C 0.5219970703125 0.07200000000000006 0.5204970703125 0.07200000000000006 0.5189970703125 0.07200000000000006 C 0.5099970703125 0.07200000000000006 0.5129970703125 0.0645 0.5129970703125 0.0645 L 0.5084970703125 0.06600000000000006 C 0.4994970703125 0.07200000000000006 0.4964970703125 0.07650000000000001 0.4934970703125 0.08400000000000007 L 0.4964970703125 0.10950000000000004 C 0.4934970703125 0.126 0.5084970703125 0.14700000000000002 0.5234970703125 0.15150000000000008 C 0.5774970703125 0.14550000000000007 0.5939970703125 0.135 0.6494970703125 0.12450000000000006 C 0.6119970703125 0.261 0.5504970703125001 0.39150000000000007 0.5174970703125 0.5055000000000001 C 0.4829970703125 0.5145000000000001 0.4649970703125 0.5250000000000001 0.4559970703125 0.5250000000000001 L 0.4469970703125 0.5250000000000001 C 0.4424970703125 0.5355000000000001 0.4379970703125 0.552 0.4334970703125 0.5625 C 0.4334970703125 0.5685 0.4364970703125 0.5760000000000001 0.4364970703125 0.5790000000000001 C 0.4379970703125 0.5850000000000001 0.4424970703125 0.5895000000000001 0.4469970703125 0.5955 C 0.4499970703125 0.5955 0.45149707031249997 0.5955 0.4544970703125 0.5955 C 0.4649970703125 0.5955 0.4829970703125 0.5940000000000001 0.4949970703125 0.5940000000000001 C 0.4829970703125 0.6255000000000001 0.4724970703125 0.669 0.4664970703125 0.7095 C 0.4499970703125 0.8490000000000001 0.5114970703125 0.9660000000000001 0.6629970703125 0.9660000000000001 C 0.6899970703125 0.9660000000000001 0.7259970703125 0.9555 0.7514970703125 0.9555 C 0.7799970703125 0.9405000000000001 0.8264970703125001 0.9345000000000001 0.8504970703125 0.912 C 0.8609970703125001 0.894 0.8699970703125 0.9015000000000001 0.8789970703125001 0.885 C 0.8774970703125 0.885 0.8729970703125001 0.8835000000000001 0.8744970703125 0.8805000000000001 L 0.8774970703125 0.8760000000000001 L 0.8774970703125 0.8715 C 0.8819970703125 0.8655 0.8819970703125 0.8580000000000001 0.8834970703125 0.8505 C 0.8564970703125 0.8655 0.7784970703125 0.8895000000000001 0.7469970703125 0.8925000000000001 C 0.7289970703124999 0.8955000000000001 0.7109970703125 0.8955000000000001 0.6959970703125 0.8955000000000001 C 0.6149970703125001 0.8955000000000001 0.5759970703125 0.8610000000000001 0.5759970703125 0.756 C 0.5759970703125 0.7335 0.6104970703125 0.5895000000000001 0.6209970703125001 0.5685 C 0.6899970703125 0.5445 0.8534970703125 0.507 0.9269970703125 0.507 L 0.9644970703125 0.5055000000000001 L 0.9764970703125 0.498 C 0.9869970703125001 0.4950000000000001 0.9824970703125 0.4860000000000001 0.9959970703125001 0.4860000000000001 C 0.9974970703125 0.4860000000000001 0.9974970703125 0.4860000000000001 0.9989970703125 0.4860000000000001 L 0.9944970703125 0.4770000000000001 C 0.9524970703125 0.4575 0.8999970703125 0.4515 0.8444970703125 0.4515 C 0.7769970703125 0.4515 0.7064970703125 0.4620000000000001 0.6479970703125 0.4770000000000001" fill="#000000" fill-rule="nonzero"/></g><g/><g clip-path="url(#SvgjsClipPath1012)"><g clip-path="url(#ace2942bc-b203-4cbb-8227-fc3e76ba30b1480b51c5-e86a-420d-b682-84651947fff8)"><path d=" M -0.7192687422533873 1.034136266113884 C -0.5945761810081369 0.9406500610992976 -0.48205725420518375 0.6980908100355145 -0.5669737520271025 0.4870368584765584 C -0.6707070681616036 0.22923150043047108 -0.7523684058870825 0.18002211591133463 -0.7700392749820408 -0.02463777117247212 C -0.6839602199828223 0.16429437809843478 -0.5891619861538545 0.22557774930181446 -0.5029832833965817 0.4004429567273927 C -0.31094544566631643 0.7900989066389625 -0.6376074045279083 1.034136266113884 -0.7192687422533873 1.034136266113884" fill="#b7b7a5" transform="matrix(1,0,0,1,0,0)" fill-rule="nonzero"/></g><g clip-path="url(#ace2942bc-b203-4cbb-8227-fc3e76ba30b1480b51c5-e86a-420d-b682-84651947fff8)"><path d=" M -0.7192687422533873 1.034136266113884 C -0.6111177088451466 0.7586268230534873 -0.721477600890257 0.6464400554440483 -0.8097489065666698 0.4870368584765584 C -0.8980368202027581 0.3276170535493929 -0.8848002763412152 0.04621178480411797 -0.7700392749820408 -0.02463777117247233 C -0.7523684058870825 0.18002211591133463 -0.6707070681616036 0.22923150043047108 -0.5669737520271025 0.4870368584765584 C -0.48205725420518375 0.6980908100355145 -0.5945761810081369 0.9406500610992976 -0.7192687422533873 1.034136266113884" fill="#000000" transform="matrix(1,0,0,1,0,0)" fill-rule="nonzero"/></g><g clip-path="url(#ace2942bc-b203-4cbb-8227-fc3e76ba30b1480b51c5-e86a-420d-b682-84651947fff8)"><path d=" M -0.7806351532551454 1.034136266113884 C -0.7806351532551454 0.9062217606915455 -0.9500529499070901 0.739394805749012 -0.9748652416626048 0.6602246619748898 C -1.0168003398437793 0.5263977229079975 -0.9700157174372968 0.4464802209484681 -0.9128677281931695 0.3754147614960939 C -0.903301543419959 0.4158717512661298 -0.8893840732117119 0.4540700585202688 -0.871115317568428 0.48703685847655853 C -0.7828440118920152 0.6464400554440483 -0.6724841198469048 0.7586268230534873 -0.7806351532551454 1.034136266113884" fill="#cf9645" transform="matrix(1,0,0,1,0,0)" fill-rule="nonzero"/></g><g clip-path="url(#ace2942bc-b203-4cbb-8227-fc3e76ba30b1480b51c5-e86a-420d-b682-84651947fff8)"><path d=" M -0.4314528010732873 0.4585542076327113 C -0.4775232812137141 0.30855111584167483 -0.5500834570369026 0.25205083702490044 -0.567455382857698 0.19659685966769594 C -0.5968016476046822 0.10282831933862235 -0.5640341431645013 0.046859495231470746 -0.5239923523863581 -0.002914559916640011 C -0.5172827366773702 0.025435227249801462 -0.507533864347727 0.052190650287374504 -0.4947457353974281 0.07527571423661504 C -0.4329475174441014 0.18696424305578255 -0.35565407311333486 0.2655531082412548 -0.4314528010732873 0.4585542076327113" fill="#ba8437" transform="matrix(1,0,0,1,0,0)" fill-rule="nonzero"/></g></g></g><defs><clipPath id="SvgjsClipPath1012"><path d=" M -0.9909749625480461 -0.02463626611388403 h 0.590974962548046 v 1.0587725322277681 h -0.590974962548046 Z"/></clipPath><clipPath id="ace2942bc-b203-4cbb-8227-fc3e76ba30b1480b51c5-e86a-420d-b682-84651947fff8"><path d=" M -0.9909749625480461 1.034136266113884 L -0.39999732544748756 1.034136266113884 L -0.39999732544748756 -0.02463777117247212 L -0.9909749625480461 -0.02463777117247212 Z"/></clipPath></defs></svg>